[{"/home/user/WEB/KeyboardApp/MainReactAppMath/src/index.js":"1","/home/user/WEB/KeyboardApp/MainReactAppMath/src/App.js":"2","/home/user/WEB/KeyboardApp/MainReactAppMath/src/serviceWorker.js":"3","/home/user/WEB/KeyboardApp/MainReactAppMath/src/components/scientificKeyboard .js":"4"},{"size":520,"mtime":1683868482000,"results":"5","hashOfConfig":"6"},{"size":10679,"mtime":1686034655811,"results":"7","hashOfConfig":"6"},{"size":5485,"mtime":1683829930000,"results":"8","hashOfConfig":"6"},{"size":14633,"mtime":1686028623044,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"14"},"ank24",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"/home/user/WEB/KeyboardApp/MainReactAppMath/src/index.js",["26"],[],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n",[],"/home/user/WEB/KeyboardApp/MainReactAppMath/src/App.js",["27","28","29","30","31","32","33","34","35","36","37","38","39","40","41"],[],"import ScientificKeyboard from \"./components/scientificKeyboard \";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItem from '@mui/material/ListItem';\nimport List from '@mui/material/List';\nimport Divider from '@mui/material/Divider';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport CloseIcon from '@mui/icons-material/Close';\nimport Slide from '@mui/material/Slide';\nimport { WindowSharp } from \"@mui/icons-material\";\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport axios from \"axios\";\nimport katex from 'katex';\nimport \"./App.css\";\nimport QRCode from 'qrcode.react';\n\n\n\n\n\n\n\nconst App = () => {\n\n\n\n\n\n\n\n  //................... .............................../'/keyboard part \\'/...................................//.................................//\n\n  //.................. .............................../'/keyboard part \\'/...................................//.................................//\n\n\n  const userData = [\n    { token: 'token1', key: 'key1' },\n    { token: 'token2', key: 'key2' },\n    // Add more user data as needed\n  ];\n  const [mobileData, setMobileData] = useState('');\n\n\n  const sendDataToBackend = (value) => {\n    try {\n      const res = document.getElementById('result');\n      console.log(res.innerText, \"..................../div res tag of the latex/................\");\n\n      const keyValue = res.innerText;\n\n      console.log(keyValue, \"this is the key value of the latex/................\");\n\n      // Send the data to the WebSocket server\n      const ws = new WebSocket('ws://192.168.100.59:8080');\n\n      // Handle WebSocket connection open\n      ws.onopen = () => {\n        console.log('Connected to WebSocket server');\n\n        // Send the data to the server\n        ws.send(keyValue);\n      };\n\n      // Handle WebSocket errors\n      ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n\n      // Handle WebSocket connection close\n      ws.onclose = () => {\n        console.log('Disconnected from WebSocket server');\n      };\n\n      // Handle WebSocket received messages\n      ws.onmessage = (message) => {\n        console.log('Received message:', message.data);\n        // Handle the received message as needed\n        const resData = message.data;\n        setMobileData(resData);\n        const editorElement = document.getElementById('editor');\n        editorElement.innerHTML = `<span style=\"font-size: 20px\">${mobileData}</span>`;\n\n      };\n    } catch (error) {\n      console.error(error);\n      setInput(false);\n    }\n  };\n\n\n\n  const [outputValue, setOutputValue] = useState('');\n  const [error, setError] = useState('');\n  const fetchData = async (value, sendDataToBackend) => {\n    try {\n      sendDataToBackend(value);\n      setInput(\"\");\n      \n      const keyValue = (input);\n\n      console.log(keyValue, \"this is the key value\");\n\n      const ws = new WebSocket('ws://localhost:8080');\n\n      // Handle WebSocket connection open\n      ws.onopen = () => {\n        console.log('Connected to WebSocket server');\n\n        // Send the data to the server\n        ws.send(keyValue);\n      };\n\n      // Handle WebSocket errors\n      ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n\n      // Handle WebSocket connection close\n      ws.onclose = () => {\n        console.log('Disconnected from WebSocket server');\n      };\n\n      // Handle WebSocket received messages\n      ws.onmessage = (message) => {\n        console.log('Received message:', message.data);\n        // Handle the received message as needed\n        const resData = message.data;\n        const editorElement = document.getElementById('editor');\n        editorElement.innerHTML = `<span style=\"font-size: 20px\">${resData}</span>`;\n      };\n    } catch (error) {\n      console.error(error);\n      console.log('Error:', error);\n      setError('Error occurred while processing the request, Please try again...');\n      setTimeout(function () {\n        window.location.reload();\n      }, 5000000000000000);\n      setInput(false);\n    }\n  };\n\n\n  const handleChange = (event) => {\n    setInput(event.target.value);\n    console.log(\"key pressed by the user \", input);\n\n  };\n\n  // const element =  document.createElementById('myElement');\n\n  const [input, setInput] = useState(\"\");\n  const string = (input)\n  // onst latex = katex.render(string, element,{\n  //       font: 'mathit' // or another font name\n  //     });\n\n  const handleInput = (value) => {\n    const latex = katex.renderToString(input + value)\n    const inpResultField = document.getElementById(\"result\")\n    inpResultField.innerHTML = latex;\n    setInput(input + value);\n    console.log('.......................//result//.........................', input.slice(0, -4));\n    if (value === '\\u232b') {\n      // Handle backspace action\n      const updatedInput = input.slice(0, -1); // Remove the last character from the input\n      setInput(updatedInput);\n    } else {\n      // Handle other input actions\n      // Perform the desired logic for other symbols\n      setInput(prevInput => prevInput + value);\n    }\n\n\n    console.log(typeof (input), \":\", input)\n\n  };\n  const Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n\n\n\n\n\n\n  });\n\n  const handleLatex = {};\n  // const inputs = input.split(\" \"); // Split the input into an array of separate LaTeX strings\n  // const latex = inputs.map((input) => katex.renderToString(input, { throwOnError: false })).join(\"\"); // Render each LaTeX string separately and join them into a single string\n\n  // console.log(latex, \"latex of  the user input///////\");\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    window.location.reload();\n\n    setOpen(false);\n  }\n  const handleClick = () => {\n    console.log('input field submit key pressed');\n  }\n\n  // Dark theme settings.......\n\n  const handleKeyDown = (event) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      fetchData();\n    }\n  };\n\n\n\n  return (\n\n\n    <div className=\"app\" style={{\n      backgroundColor: '#000',\n      color: '#4caf50',\n      padding: '15px',\n      border: '10px solid #4caf50',\n      borderRadius: '10px',\n      boxShadow: '10px 10px 15px rgba(10, 40, 100, 0.25)',\n      textShadow: '0px 0px 10px cyan',\n    }}>\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', height: '100vh' }}>\n        <h1\n          style={{\n            backgroundColor: '#000',\n            color: '#4caf50',\n            padding: '15px',\n            border: '10px solid #4caf50',\n            borderRadius: '10px',\n            boxShadow: '10px 10px 15px rgba(10, 40, 100, 0.25)',\n            textShadow: '0px 0px 10px cyan',\n          }}\n        >\n          Scientific Keyboard\n        </h1>\n        <Button\n          variant=\"contained\"\n          onClick={handleClickOpen}\n          style={{\n            backgroundColor: '#4caf50',\n            color: '#000',\n            padding: '15px',\n            border: '10px solid #4caf50',\n            borderRadius: '10px',\n            boxShadow: '10px 10px 15px rgba(10, 40, 100, 0.25)',\n            textShadow: '0px 0px 10px cyan',\n          }}\n        >\n          Click to Open Math Keyboard\n        </Button>\n\n\n\n      </div>\n\n\n      <Dialog\n        fullScreen\n        open={open}\n\n\n      // TransitionComponent={Transition}\n      >\n        <AppBar position=\"relative\" style={{ backgroundColor: '#000' }}>\n          <Toolbar>\n            <IconButton\n              style={{ backgroundColor: '#000', color: '#4caf50', float: 'right' }}\n              edge=\"start\"\n              color=\"inherit\"\n              onClick={handleClose}\n              aria-label=\"close\"\n            >\n              <CloseIcon />\n            </IconButton>\n            <Typography\n              sx={{\n                ml: 2,\n                flex: 1,\n                backgroundColor: 'transparent',\n                color: '#4caf50',\n                padding: '12px',\n                border: 'none',\n                fontWeight: 'bold',\n                fontSize: '24px', // Increased font size\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                textShadow: '2px 2px 4px grey', // Added grey text shadow\n              }}\n              variant=\"h1\"\n              component=\"div\"\n            >\n              Scientific Keyboard\n            </Typography>\n\n          </Toolbar>\n        </AppBar>\n        <List style={{ backgroundColor: '#000' }}>\n          <div style={{ display: 'flex', alignItems: 'center', backgroundColor: '#000' }}>\n            <input\n              onKeyDown={handleKeyDown}\n              type=\"text\"\n              value={input}\n              onChange={handleChange}\n              size=\"100\"\n              style={{ backgroundColor: \"lightgrey\", width: '1460px', height: '40px', border: '1px solid #4caf50', marginRight: '10px' }}\n\n            />\n            <button\n              onClick={() => fetchData(input, sendDataToBackend)}\n\n              size=\"150\"\n              style={{\n                height: '43px',\n                backgroundColor: '#4caf50',\n                width: '160px',\n                color: '#000',\n                border: '1px solid #4caf50',\n                padding: '10px',\n                boxShadow: '5px 10px 10px rgba(10, 40, 100, 0.25)',\n              }}\n            >\n              Submit\n            </button>\n          </div>\n\n          <p></p>\n\n          <ScientificKeyboard handleInput={handleInput} />\n\n\n          {error && <p style={{ color: '#4caf50' }}>Error: {error}</p>}\n\n          <div\n            className=\"output\"\n            dangerouslySetInnerHTML={{ __html: outputValue }}\n            style={{ fontSize: '18px', marginBottom: '10px', color: \"black\" }}\n          ></div>\n          <QRCode value=\"http:192.168.100.59:3000\" />\n\n          <Button\n            autoFocus\n            color=\"inherit\"\n            style={{\n              float: 'right',\n              backgroundColor: '#4caf50',\n              border: '1px solid #4caf50',\n              width: '10px',\n            }}\n            onClick={handleClose}\n          >\n            Close\n          </Button>\n        </List>\n      </Dialog>\n\n\n    </div >\n\n\n  );\n};\n\nexport default App;","/home/user/WEB/KeyboardApp/MainReactAppMath/src/serviceWorker.js",[],[],"/home/user/WEB/KeyboardApp/MainReactAppMath/src/components/scientificKeyboard .js",["42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61"],[],"\r\nimport React, { useRef, useEffect, useState } from \"react\";\r\nimport { Button, Grid, MenuItem, Select, Tooltip } from '@mui/material';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport axios from \"axios\";\r\nimport katex from 'katex';\r\nimport KeyboardIcon from '@mui/icons-material/Keyboard';\r\nimport KeyboardHideTwoToneIcon from '@mui/icons-material/KeyboardHideTwoTone';\r\nimport { IconButton } from '@mui/material';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport UndoIcon from '@mui/icons-material/Undo';\r\nimport RedoIcon from '@mui/icons-material/Redo';\r\nimport io from \"socket.io-client\"\r\n\r\n\r\n\r\n\r\nimport '../App.css';\r\nimport * as iink from 'iink-js';\r\n\r\n\r\n\r\n\r\nconst ScientificKeyboard = ({ handleInput }) => {\r\n  \r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n  const keys = [\r\n    ['\\\\sin', '\\\\cos', '\\\\tan', '\\\\cot', '\\\\sec', '\\\\csc', '\\\\arcsin', '\\\\arccos', '\\\\arctan'],\r\n    ['\\\\text{acot}', '\\\\text{asec}', '\\\\text{acsc}', '\\\\log', '\\\\ln', '\\\\exp', '\\\\sqrt{}', '\\\\sqrt[3]{}', '\\\\sqrt[4]{}'],\r\n    ['x^n', 'x^2', 'x^3', '\\\\int', '\\\\iint', '\\\\iiint', '\\\\oint', '\\\\oiint', '\\\\oiiint', '\\\\nabla', '\\\\Delta', '\\\\partial'],\r\n    ['(', ')', '[', ']', '{}', '\\\\pi', '\\\\text{e}', '\\\\varphi', '\\\\gamma', '\\\\phi', '\\\\theta', '\\\\lambda', '\\\\mu', '\\\\nu'],\r\n    ['\\\\rho', '\\\\sigma', '\\\\tau', '\\\\omega', '<', '>', '\\\\neq', '\\\\approx', '\\\\cong', '\\\\equiv', '\\\\not\\\\equiv'],\r\n    ['\\\\prec', '\\\\succ', '\\\\preceq', '\\\\succeq', '\\\\in', '\\\\notin', '\\\\ni', '\\\\not\\\\ni', '\\\\subset', '\\\\supset'],\r\n    ['\\\\subseteq', '\\\\supseteq', '\\\\nsubseteq', '\\\\nsupseteq', '\\\\forall', '\\\\exists', '\\\\nexists', '\\\\land'],\r\n    ['\\\\lor', '\\\\neg', '\\\\implies', '\\\\iff', '%', '\\\\pm', '!', '^\\\\circ', '\\\\div', '\\\\times'],\r\n    ['\\\\cdot', '\\\\mp', '\\\\square\\\\mkern-10mu\\\\raisebox{0.3ex}{\\\\small{$\\\\scriptstyle\\\\langle$}}', '\\\\angle'],\r\n    ['\\\\measuredangle', '\\\\sphericalangle', '\\\\parallel', '\\\\nparallel', '\\\\mid', '\\\\perp', '\\\\infty'],\r\n    ['1', '2', '3',],\r\n    ['4', '5', '6', '+'],\r\n    ['7', '8', '9', '-'],\r\n    ['.', '0', '=', '*', '\\u232b'],\r\n  ];\r\n\r\n\r\n\r\n  const [isKeyboardVisible, setKeyboardVisible] = useState(false);\r\n\r\n  const toggleKeyboard = () => {\r\n    setKeyboardVisible(!isKeyboardVisible);\r\n  };\r\n\r\n \r\n  //.......................//phone Conversions//........................//\r\n\r\n\r\n  //.......................//phone Conversions//.......................//\r\n\r\n\r\n\r\n  // ........................//..................................//\r\n\r\n  // ........................//..................................//\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const [outputValue, setOutputValue] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [input, setInput] = useState('');\r\n\r\n  const [resultValue, setresultValue] = useState(\"\");\r\n  const [penType, setPenType] = useState('PEN');\r\n  \r\n  \r\n  //............................///..................................//\r\n\r\n  useEffect(() => {\r\n\r\n\r\n\r\n    \r\n    const editorElement = document.getElementById('editor');\r\n    const resultElement = document.getElementById('result');\r\n    const undoElement = document.getElementById('undo');\r\n    const redoElement = document.getElementById('redo');\r\n    const clearElement = document.getElementById('clear');\r\n    const convertElement = document.getElementById('convert');\r\n    const eraserElement = document.getElementById('eraser');\r\n    const penElement = document.getElementById('pen');\r\n    const erasePreciselyElement = document.getElementById('erase-precisely');\r\n\r\n    const handleChanged = (event) => {\r\n      undoElement.disabled = !event.detail.canUndo;\r\n      redoElement.disabled = !event.detail.canRedo;\r\n      clearElement.disabled = event.detail.isEmpty;\r\n    };\r\n\r\n    const cleanLatex = (latexExport) => {\r\n      if (latexExport.includes('\\\\\\\\')) {\r\n        const steps = '\\\\begin{align*}' + latexExport + '\\\\end{align*}';\r\n        return steps\r\n          .replace(\"\\\\begin{aligned}\", \"\")\r\n          .replace(\"\\\\end{aligned}\", \"\")\r\n          .replace(new RegExp(\"(align.{1})\", \"g\"), \"aligned\");\r\n      }\r\n      return latexExport.replace(new RegExp(\"(align.{1})\", \"g\"), \"aligned\");\r\n    };\r\n\r\n    const handleExported = (evt) => {\r\n      const exports = evt.detail.exports;\r\n      if (exports && exports['application/x-latex']) {\r\n        const cleanedLatex = cleanLatex(exports['application/x-latex']);\r\n        resultElement.innerHTML = cleanedLatex;\r\n        convertElement.disabled = false;\r\n      }\r\n      else if (exports && exports['application/mathml+xml']) {\r\n        convertElement.disabled = false;\r\n        resultElement.innerText = exports['application/mathml+xml'];\r\n      } else if (exports && exports['application/mathofficeXML']) {\r\n        convertElement.disabled = false;\r\n        resultElement.innerText = exports['application/mathofficeXML'];\r\n      } else {\r\n        convertElement.disabled = true;\r\n        resultElement.innerHTML = '';\r\n      }\r\n    };\r\n\r\n    const handleUndo = () => {\r\n      editorElement.editor.undo();\r\n    };\r\n\r\n    const handleRedo = () => {\r\n      editorElement.editor.redo();\r\n    };\r\n\r\n    const handleClear = () => {\r\n      editorElement.editor.clear();\r\n    };\r\n\r\n    const handleResult = () => {\r\n      editorElement.editor(\"result\");\r\n      console.log(\"result from editor was.................//\");\r\n    };\r\n\r\n    const handleConvert = () => {\r\n      editorElement.editor.convert();\r\n    };\r\n\r\n    const handlePen = () => {\r\n      console.log('Handle pen selection change');\r\n      setPenType('PEN');\r\n      eraserElement.disabled = false;\r\n      eraserElement.classList.remove('active');\r\n      penElement.disabled = true;\r\n      penElement.classList.add('active');\r\n    };\r\n\r\n    const handleEraser = () => {\r\n      setPenType('ERASER');\r\n      eraserElement.disabled = true;\r\n      eraserElement.classList.add('active');\r\n      penElement.disabled = false;\r\n      penElement.classList.remove('active');\r\n    };\r\n\r\n    const handleErasePrecisely = (e) => {\r\n      const configuration = { ...editorElement.editor.configuration };\r\n      configuration.recognitionParams.iink.math.eraser = {\r\n        'erase-precisely': e.target.checked,\r\n      };\r\n      editorElement.editor.configuration = configuration;\r\n    };\r\n\r\n    editorElement.addEventListener('changed', handleChanged);\r\n    editorElement.addEventListener('exported', handleExported);\r\n    undoElement.addEventListener('click', handleUndo);\r\n    redoElement.addEventListener('click', handleRedo);\r\n    clearElement.addEventListener('click', handleClear);\r\n    convertElement.addEventListener('click', handleConvert);\r\n    resultElement.addEventListener('click', handleResult);\r\n    // eraserElement.addEventListener('click', handleEraser);\r\n    // penElement.addEventListener('click', handlePen);\r\n    // erasePreciselyElement.addEventListener('change', handleErasePrecisely);\r\n\r\n    const recognitionParams = {\r\n      type: 'MATH',\r\n      protocol: 'WEBSOCKET',\r\n      server: {\r\n        scheme: 'https',\r\n        host: 'webdemoapi.myscript.com',\r\n        applicationKey: 'da4d9314-3f94-4e4c-be14-d57fdd71adde',\r\n        hmacKey: '6d36bbad-9527-4062-8268-e686bd56640f'\r\n      },\r\n      iink: {\r\n        math: {\r\n          mimeTypes: ['application/x-latex', 'application/vnd.myscript.jiix', 'application/mathml+xml'],\r\n        },\r\n        eraser: {\r\n          'erase-precisely': false,\r\n        },\r\n        export: {\r\n          jiix: {\r\n            strokes: true\r\n          }\r\n        }\r\n      }\r\n    };\r\n    iink.register(editorElement, {\r\n      recognitionParams: recognitionParams,\r\n      iink: {\r\n        eraser: {\r\n          'erase-precisely': false,\r\n        },\r\n        export: {\r\n          jiix: {\r\n            strokes: true\r\n          }\r\n        },\r\n      }\r\n    });\r\n\r\n   \r\n    window.addEventListener('resize', () => {\r\n      editorElement.editor.resize();\r\n    });\r\n\r\n    // Clean up event listeners on component unmount\r\n    return () => {\r\n      editorElement.removeEventListener('changed', handleChanged);\r\n      editorElement.removeEventListener('exported', handleExported);\r\n      undoElement.removeEventListener('click', handleUndo);\r\n      redoElement.removeEventListener('click', handleRedo);\r\n      clearElement.removeEventListener('click', handleClear);\r\n      convertElement.removeEventListener('click', handleConvert);\r\n      resultElement.removeEventListener('click', handleResult);\r\n\r\n\r\n      window.removeEventListener('resize', () => {\r\n        editorElement.editor.resize();\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n  const res = document.getElementById('result');\r\n  const handleClick = (symbol) => {\r\n    handleInput(symbol);\r\n    if (res) {\r\n      setresultValue(res.innerText);\r\n    }\r\n\r\n  }\r\n\r\n  console.log(resultValue, \"resultValue latex string\")\r\n  const handleChange = (event) => {\r\n    setInput(event.target.value);\r\n  };\r\n\r\n\r\n\r\n  // Call sendDataToBackend with the resultValue\r\n\r\n  return (\r\n    <div style={{ maxWidth: '1500px' }}>\r\n      <div id=\"result\" style={{ backgroundColor: 'grey' }}></div>\r\n      <div>\r\n        <nav\r\n          style={{\r\n            backgroundColor: '#000',\r\n            padding: '10px',\r\n            boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.5)',\r\n            zIndex: '1',\r\n            position: 'sticky',\r\n            top: '0',\r\n          }}\r\n        >\r\n          <div className=\"button-div\">\r\n            <button\r\n              id=\"clear\"\r\n              style={{\r\n                backgroundColor: 'grey',\r\n                boxShadow: '0px 2px 4px rgba(0, 255, 255, 0.3)',\r\n                padding: '1px',\r\n              }}\r\n              className=\"nav-btn btn-fab-mini btn-neonBlue\"\r\n              disabled\r\n            >\r\n              <DeleteIcon />\r\n            </button>\r\n\r\n            <button\r\n              id=\"undo\"\r\n              className=\"nav-btn btn-fab-mini btn-neonBlue\"\r\n              disabled\r\n              style={{\r\n                backgroundColor: 'grey',\r\n                boxShadow: '0px 2px 4px rgba(0, 255, 255, 0.3)',\r\n              }}\r\n            ></button>\r\n            <button\r\n              id=\"redo\"\r\n              className=\"nav-btn btn-fab-mini btn-neonBlue\"\r\n              disabled\r\n              style={{\r\n                backgroundColor: 'grey',\r\n                boxShadow: '0px 2px 4px rgba(0, 255, 255, 0.3)',\r\n              }}\r\n            ></button>\r\n          </div>\r\n\r\n          <div className=\"spacer\"></div>\r\n          <button\r\n            className=\"classic-btn btn-neonBlue\"\r\n            id=\"convert\"\r\n            style={{\r\n              backgroundColor: 'grey',\r\n              boxShadow: '0px 2px 4px rgba(0, 255, 255, 0.3)',\r\n            }}\r\n            disabled\r\n          >\r\n            Convert\r\n          </button>\r\n\r\n          {/* Place the keyboard icon here */}\r\n          <div style={{ maxWidth: '100%' }}>\r\n            <div style={{ display: 'inline-block', position: 'relative' }}>\r\n              <IconButton\r\n                onClick={toggleKeyboard}\r\n                color=\"default\"\r\n                style={{\r\n                  backgroundColor: isKeyboardVisible ? '#111' : '',\r\n                  padding: '8px',\r\n                  fontSize: '18px',\r\n                  display: 'inline-block',\r\n                  marginTop: '10px',\r\n                }}\r\n              >\r\n                {isKeyboardVisible ? (\r\n                  <KeyboardHideTwoToneIcon style={{ fontSize: '30px', color: '#00ff00' }} />\r\n                ) : (\r\n                  <KeyboardIcon style={{ fontSize: '30px', color: '#00ff00' }} />\r\n                )}\r\n              </IconButton>\r\n\r\n              {isKeyboardVisible && (\r\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                  <Grid container spacing={1} alignItems=\"center\">\r\n                    {keys.map((keyGroup, index) => (\r\n                      <Grid item key={index}>\r\n                        <ButtonGroup\r\n                          variant=\"contained\"\r\n                          aria-label=\"symbol-group\"\r\n                          style={{\r\n                            display: 'flex',\r\n                            flexDirection: 'row',\r\n                            alignItems: 'center',\r\n                            margin: '5px',\r\n                          }}\r\n                        >\r\n                          {keyGroup.map((symbol, index) => (\r\n                            <Tooltip key={index} title={symbol} placement=\"top\" style={{ maxWidth: '100px' }}>\r\n                              <IconButton\r\n                                onClick={() => handleInput(symbol)}\r\n                                style={{\r\n                                  backgroundColor: '#111',\r\n                                  fontWeight: 'bold',\r\n                                  padding: '4px',\r\n                                  width: '32px',\r\n                                  height: '32px',\r\n                                  margin: '2px',\r\n                                  color: '#00ff00',\r\n                                }}\r\n                              >\r\n                                <span\r\n                                  style={{\r\n                                    fontWeight: 'bold',\r\n                                    fontSize: '8px',\r\n                                    fontOpticalSizing: 'vertical',\r\n                                    padding: '15px',\r\n                                    width: '50px',\r\n                                    height: '48px',\r\n                                    margin: '6px',\r\n                                    color: '#00ff00',\r\n                                  }}\r\n                                  dangerouslySetInnerHTML={{ __html: katex.renderToString(symbol) }}\r\n                                  className=\"button-text\"\r\n                                />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                          ))}\r\n                        </ButtonGroup>\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </nav>\r\n\r\n        <div id=\"editor\" touch-action=\"none\" fon-size=\"1000px\" style={{ color: 'black', backgroundColor: 'lightgrey', display: 'flex', flexDirection: 'column', padding: '15px' }}>\r\n          <h1 style={{ color: 'grey' }}>Write Here:</h1>\r\n\r\n\r\n          <div>\r\n            <div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n  );\r\n};\r\n\r\nexport default ScientificKeyboard;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// applicationKey: '515131ab-35fa-411c-bb4d-3917e00faf60',\r\n//         hmacKey: '54b2ca8a-6752-469d-87dd-553bb450e9ad'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",{"ruleId":"62","severity":1,"message":"63","line":2,"column":8,"nodeType":"64","messageId":"65","endLine":2,"endColumn":16},{"ruleId":"62","severity":1,"message":"66","line":2,"column":27,"nodeType":"64","messageId":"65","endLine":2,"endColumn":36},{"ruleId":"62","severity":1,"message":"67","line":2,"column":38,"nodeType":"64","messageId":"65","endLine":2,"endColumn":44},{"ruleId":"62","severity":1,"message":"68","line":5,"column":8,"nodeType":"64","messageId":"65","endLine":5,"endColumn":20},{"ruleId":"62","severity":1,"message":"69","line":6,"column":8,"nodeType":"64","messageId":"65","endLine":6,"endColumn":16},{"ruleId":"62","severity":1,"message":"70","line":8,"column":8,"nodeType":"64","messageId":"65","endLine":8,"endColumn":15},{"ruleId":"62","severity":1,"message":"71","line":15,"column":10,"nodeType":"64","messageId":"65","endLine":15,"endColumn":21},{"ruleId":"62","severity":1,"message":"72","line":16,"column":10,"nodeType":"64","messageId":"65","endLine":16,"endColumn":21},{"ruleId":"62","severity":1,"message":"73","line":16,"column":23,"nodeType":"64","messageId":"65","endLine":16,"endColumn":36},{"ruleId":"62","severity":1,"message":"74","line":17,"column":8,"nodeType":"64","messageId":"65","endLine":17,"endColumn":13},{"ruleId":"62","severity":1,"message":"75","line":41,"column":9,"nodeType":"64","messageId":"65","endLine":41,"endColumn":17},{"ruleId":"62","severity":1,"message":"76","line":97,"column":23,"nodeType":"64","messageId":"65","endLine":97,"endColumn":37},{"ruleId":"62","severity":1,"message":"77","line":157,"column":9,"nodeType":"64","messageId":"65","endLine":157,"endColumn":15},{"ruleId":"62","severity":1,"message":"78","line":182,"column":9,"nodeType":"64","messageId":"65","endLine":182,"endColumn":19},{"ruleId":"62","severity":1,"message":"79","line":192,"column":9,"nodeType":"64","messageId":"65","endLine":192,"endColumn":20},{"ruleId":"62","severity":1,"message":"80","line":209,"column":9,"nodeType":"64","messageId":"65","endLine":209,"endColumn":20},{"ruleId":"62","severity":1,"message":"67","line":2,"column":17,"nodeType":"64","messageId":"65","endLine":2,"endColumn":23},{"ruleId":"62","severity":1,"message":"81","line":3,"column":10,"nodeType":"64","messageId":"65","endLine":3,"endColumn":16},{"ruleId":"62","severity":1,"message":"82","line":3,"column":24,"nodeType":"64","messageId":"65","endLine":3,"endColumn":32},{"ruleId":"62","severity":1,"message":"83","line":3,"column":34,"nodeType":"64","messageId":"65","endLine":3,"endColumn":40},{"ruleId":"62","severity":1,"message":"74","line":5,"column":8,"nodeType":"64","messageId":"65","endLine":5,"endColumn":13},{"ruleId":"62","severity":1,"message":"84","line":11,"column":8,"nodeType":"64","messageId":"65","endLine":11,"endColumn":16},{"ruleId":"62","severity":1,"message":"85","line":12,"column":8,"nodeType":"64","messageId":"65","endLine":12,"endColumn":16},{"ruleId":"62","severity":1,"message":"86","line":13,"column":8,"nodeType":"64","messageId":"65","endLine":13,"endColumn":10},{"ruleId":"62","severity":1,"message":"87","line":75,"column":10,"nodeType":"64","messageId":"65","endLine":75,"endColumn":21},{"ruleId":"62","severity":1,"message":"76","line":75,"column":23,"nodeType":"64","messageId":"65","endLine":75,"endColumn":37},{"ruleId":"62","severity":1,"message":"88","line":76,"column":10,"nodeType":"64","messageId":"65","endLine":76,"endColumn":15},{"ruleId":"62","severity":1,"message":"89","line":76,"column":17,"nodeType":"64","messageId":"65","endLine":76,"endColumn":25},{"ruleId":"62","severity":1,"message":"90","line":77,"column":10,"nodeType":"64","messageId":"65","endLine":77,"endColumn":15},{"ruleId":"62","severity":1,"message":"91","line":80,"column":10,"nodeType":"64","messageId":"65","endLine":80,"endColumn":17},{"ruleId":"62","severity":1,"message":"92","line":98,"column":11,"nodeType":"64","messageId":"65","endLine":98,"endColumn":32},{"ruleId":"62","severity":1,"message":"93","line":157,"column":11,"nodeType":"64","messageId":"65","endLine":157,"endColumn":20},{"ruleId":"62","severity":1,"message":"94","line":166,"column":11,"nodeType":"64","messageId":"65","endLine":166,"endColumn":23},{"ruleId":"62","severity":1,"message":"95","line":174,"column":11,"nodeType":"64","messageId":"65","endLine":174,"endColumn":31},{"ruleId":"62","severity":1,"message":"80","line":260,"column":9,"nodeType":"64","messageId":"65","endLine":260,"endColumn":20},{"ruleId":"62","severity":1,"message":"96","line":269,"column":9,"nodeType":"64","messageId":"65","endLine":269,"endColumn":21},"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","'ListItemText' is defined but never used.","'ListItem' is defined but never used.","'Divider' is defined but never used.","'WindowSharp' is defined but never used.","'createTheme' is defined but never used.","'ThemeProvider' is defined but never used.","'axios' is defined but never used.","'userData' is assigned a value but never used.","'setOutputValue' is assigned a value but never used.","'string' is assigned a value but never used.","'Transition' is assigned a value but never used.","'handleLatex' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'Button' is defined but never used.","'MenuItem' is defined but never used.","'Select' is defined but never used.","'UndoIcon' is defined but never used.","'RedoIcon' is defined but never used.","'io' is defined but never used.","'outputValue' is assigned a value but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","'input' is assigned a value but never used.","'penType' is assigned a value but never used.","'erasePreciselyElement' is assigned a value but never used.","'handlePen' is assigned a value but never used.","'handleEraser' is assigned a value but never used.","'handleErasePrecisely' is assigned a value but never used.","'handleChange' is assigned a value but never used."]